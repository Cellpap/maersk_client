=begin
#Track & Trace Events

#Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/> 

The version of the OpenAPI document: 1.2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module MaerskClient
  # The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.
  class EquipmentEvent
    # The unique identifier for the Equipment Event ID/Transport Event ID/Shipment Event ID.
    attr_accessor :event_id

    attr_accessor :event_type

    # The local date and time, where the event took place or when the event will take place, in ISO 8601 format. For Shipment Event, it is the same as eventCreatedDateTime in UTC timezone.
    attr_accessor :event_date_time

    # The UTC timestamp of when the event was created.
    attr_accessor :event_created_date_time

    # Code for the event classifier, either PLN, ACT or EST. * PLN - Planned * ACT - Actual * EST - Estimated 
    attr_accessor :event_classifier_code

    # References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
    attr_accessor :references

    # Unique identifier for equipmentEventTypeCode. * LOAD (Loaded) * DISC (Discharged) * GTIN (Gated in) * GTOT (Gated out) * STUF (Stuffed) * STRP (Stripped) * PICK (Pick-up) * DROP (Drop-off) * RSEA (Resealed) * RMVD (Removed) * INSP (Inspected) 
    attr_accessor :equipment_event_type_code

    # The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. According to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 “Container with non-ISO identification” from SMDG. 
    attr_accessor :equipment_reference

    # Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.
    attr_accessor :iso_equipment_code

    # Code to denote whether the equipment is empty or laden.
    attr_accessor :empty_indicator_code

    # An optional list of key-value (documentReferenceType-documentReferenceValue) pairs representing links to objects relevant to the event. The documentReferenceType-field is used to describe where the documentReferenceValue-field is pointing to.
    attr_accessor :document_references

    attr_accessor :event_location

    attr_accessor :transport_call

    attr_accessor :seals

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'event_id' => :'eventID',
        :'event_type' => :'eventType',
        :'event_date_time' => :'eventDateTime',
        :'event_created_date_time' => :'eventCreatedDateTime',
        :'event_classifier_code' => :'eventClassifierCode',
        :'references' => :'references',
        :'equipment_event_type_code' => :'equipmentEventTypeCode',
        :'equipment_reference' => :'equipmentReference',
        :'iso_equipment_code' => :'ISOEquipmentCode',
        :'empty_indicator_code' => :'emptyIndicatorCode',
        :'document_references' => :'documentReferences',
        :'event_location' => :'eventLocation',
        :'transport_call' => :'transportCall',
        :'seals' => :'seals'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'event_id' => :'String',
        :'event_type' => :'String',
        :'event_date_time' => :'Time',
        :'event_created_date_time' => :'Time',
        :'event_classifier_code' => :'String',
        :'references' => :'Array<EventReferencesInner>',
        :'equipment_event_type_code' => :'String',
        :'equipment_reference' => :'String',
        :'iso_equipment_code' => :'String',
        :'empty_indicator_code' => :'String',
        :'document_references' => :'Array<DocumentReferencesInner>',
        :'event_location' => :'Location',
        :'transport_call' => :'TransportCall',
        :'seals' => :'Array<Seal>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Event'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MaerskClient::EquipmentEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MaerskClient::EquipmentEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'event_id')
        self.event_id = attributes[:'event_id']
      end

      if attributes.key?(:'event_type')
        self.event_type = attributes[:'event_type']
      else
        self.event_type = nil
      end

      if attributes.key?(:'event_date_time')
        self.event_date_time = attributes[:'event_date_time']
      else
        self.event_date_time = nil
      end

      if attributes.key?(:'event_created_date_time')
        self.event_created_date_time = attributes[:'event_created_date_time']
      else
        self.event_created_date_time = nil
      end

      if attributes.key?(:'event_classifier_code')
        self.event_classifier_code = attributes[:'event_classifier_code']
      else
        self.event_classifier_code = nil
      end

      if attributes.key?(:'references')
        if (value = attributes[:'references']).is_a?(Array)
          self.references = value
        end
      end

      if attributes.key?(:'equipment_event_type_code')
        self.equipment_event_type_code = attributes[:'equipment_event_type_code']
      end

      if attributes.key?(:'equipment_reference')
        self.equipment_reference = attributes[:'equipment_reference']
      end

      if attributes.key?(:'iso_equipment_code')
        self.iso_equipment_code = attributes[:'iso_equipment_code']
      end

      if attributes.key?(:'empty_indicator_code')
        self.empty_indicator_code = attributes[:'empty_indicator_code']
      else
        self.empty_indicator_code = nil
      end

      if attributes.key?(:'document_references')
        if (value = attributes[:'document_references']).is_a?(Array)
          self.document_references = value
        end
      end

      if attributes.key?(:'event_location')
        self.event_location = attributes[:'event_location']
      end

      if attributes.key?(:'transport_call')
        self.transport_call = attributes[:'transport_call']
      else
        self.transport_call = nil
      end

      if attributes.key?(:'seals')
        if (value = attributes[:'seals']).is_a?(Array)
          self.seals = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @event_type.nil?
        invalid_properties.push('invalid value for "event_type", event_type cannot be nil.')
      end

      if @event_date_time.nil?
        invalid_properties.push('invalid value for "event_date_time", event_date_time cannot be nil.')
      end

      if @event_created_date_time.nil?
        invalid_properties.push('invalid value for "event_created_date_time", event_created_date_time cannot be nil.')
      end

      if @event_classifier_code.nil?
        invalid_properties.push('invalid value for "event_classifier_code", event_classifier_code cannot be nil.')
      end

      if !@equipment_reference.nil? && @equipment_reference.to_s.length > 15
        invalid_properties.push('invalid value for "equipment_reference", the character length must be smaller than or equal to 15.')
      end

      if !@iso_equipment_code.nil? && @iso_equipment_code.to_s.length > 4
        invalid_properties.push('invalid value for "iso_equipment_code", the character length must be smaller than or equal to 4.')
      end

      if @empty_indicator_code.nil?
        invalid_properties.push('invalid value for "empty_indicator_code", empty_indicator_code cannot be nil.')
      end

      if @transport_call.nil?
        invalid_properties.push('invalid value for "transport_call", transport_call cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @event_type.nil?
      event_type_validator = EnumAttributeValidator.new('String', ["EQUIPMENT"])
      return false unless event_type_validator.valid?(@event_type)
      return false if @event_date_time.nil?
      return false if @event_created_date_time.nil?
      return false if @event_classifier_code.nil?
      equipment_event_type_code_validator = EnumAttributeValidator.new('String', ["LOAD", "DISC", "GTIN", "GTOT", "STUF", "STRP", "PICK", "DROP", "RSEA", "RMVD", "INSP"])
      return false unless equipment_event_type_code_validator.valid?(@equipment_event_type_code)
      return false if !@equipment_reference.nil? && @equipment_reference.to_s.length > 15
      return false if !@iso_equipment_code.nil? && @iso_equipment_code.to_s.length > 4
      return false if @empty_indicator_code.nil?
      empty_indicator_code_validator = EnumAttributeValidator.new('String', ["EMPTY", "LADEN"])
      return false unless empty_indicator_code_validator.valid?(@empty_indicator_code)
      return false if @transport_call.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_type Object to be assigned
    def event_type=(event_type)
      validator = EnumAttributeValidator.new('String', ["EQUIPMENT"])
      unless validator.valid?(event_type)
        fail ArgumentError, "invalid value for \"event_type\", must be one of #{validator.allowable_values}."
      end
      @event_type = event_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] equipment_event_type_code Object to be assigned
    def equipment_event_type_code=(equipment_event_type_code)
      validator = EnumAttributeValidator.new('String', ["LOAD", "DISC", "GTIN", "GTOT", "STUF", "STRP", "PICK", "DROP", "RSEA", "RMVD", "INSP"])
      unless validator.valid?(equipment_event_type_code)
        fail ArgumentError, "invalid value for \"equipment_event_type_code\", must be one of #{validator.allowable_values}."
      end
      @equipment_event_type_code = equipment_event_type_code
    end

    # Custom attribute writer method with validation
    # @param [Object] equipment_reference Value to be assigned
    def equipment_reference=(equipment_reference)
      if equipment_reference.nil?
        fail ArgumentError, 'equipment_reference cannot be nil'
      end

      if equipment_reference.to_s.length > 15
        fail ArgumentError, 'invalid value for "equipment_reference", the character length must be smaller than or equal to 15.'
      end

      @equipment_reference = equipment_reference
    end

    # Custom attribute writer method with validation
    # @param [Object] iso_equipment_code Value to be assigned
    def iso_equipment_code=(iso_equipment_code)
      if iso_equipment_code.nil?
        fail ArgumentError, 'iso_equipment_code cannot be nil'
      end

      if iso_equipment_code.to_s.length > 4
        fail ArgumentError, 'invalid value for "iso_equipment_code", the character length must be smaller than or equal to 4.'
      end

      @iso_equipment_code = iso_equipment_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] empty_indicator_code Object to be assigned
    def empty_indicator_code=(empty_indicator_code)
      validator = EnumAttributeValidator.new('String', ["EMPTY", "LADEN"])
      unless validator.valid?(empty_indicator_code)
        fail ArgumentError, "invalid value for \"empty_indicator_code\", must be one of #{validator.allowable_values}."
      end
      @empty_indicator_code = empty_indicator_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          event_id == o.event_id &&
          event_type == o.event_type &&
          event_date_time == o.event_date_time &&
          event_created_date_time == o.event_created_date_time &&
          event_classifier_code == o.event_classifier_code &&
          references == o.references &&
          equipment_event_type_code == o.equipment_event_type_code &&
          equipment_reference == o.equipment_reference &&
          iso_equipment_code == o.iso_equipment_code &&
          empty_indicator_code == o.empty_indicator_code &&
          document_references == o.document_references &&
          event_location == o.event_location &&
          transport_call == o.transport_call &&
          seals == o.seals
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [event_id, event_type, event_date_time, event_created_date_time, event_classifier_code, references, equipment_event_type_code, equipment_reference, iso_equipment_code, empty_indicator_code, document_references, event_location, transport_call, seals].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MaerskClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.is_any?([Date, DateTime])
        value.to_s
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
