=begin
#Track & Trace Events

#Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/> 

The version of the OpenAPI document: 1.2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module MaerskClient
  # Generally used to capture location-related data; also for locations without UN Location Codes.
  class Location
    # The name of the location.
    attr_accessor :location_name

    # Geographic coordinate that specifies the north–south position of a point on the Earth's surface.
    attr_accessor :latitude

    # Geographic coordinate that specifies the east–west position of a point on the Earth's surface.
    attr_accessor :longitude

    # The UN Location code specifying where the place is located.
    attr_accessor :un_location_code

    # The code used for identifying the specific facility. This code is not the UN Location Code.
    attr_accessor :facility_code

    # The provider used for identifying the facility Code
    attr_accessor :facility_code_list_provider

    attr_accessor :address

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'location_name' => :'locationName',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'un_location_code' => :'UNLocationCode',
        :'facility_code' => :'facilityCode',
        :'facility_code_list_provider' => :'facilityCodeListProvider',
        :'address' => :'address'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'location_name' => :'String',
        :'latitude' => :'String',
        :'longitude' => :'String',
        :'un_location_code' => :'String',
        :'facility_code' => :'String',
        :'facility_code_list_provider' => :'String',
        :'address' => :'Address'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MaerskClient::Location` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MaerskClient::Location`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'location_name')
        self.location_name = attributes[:'location_name']
      end

      if attributes.key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.key?(:'un_location_code')
        self.un_location_code = attributes[:'un_location_code']
      end

      if attributes.key?(:'facility_code')
        self.facility_code = attributes[:'facility_code']
      end

      if attributes.key?(:'facility_code_list_provider')
        self.facility_code_list_provider = attributes[:'facility_code_list_provider']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@location_name.nil? && @location_name.to_s.length > 100
        invalid_properties.push('invalid value for "location_name", the character length must be smaller than or equal to 100.')
      end

      if !@latitude.nil? && @latitude.to_s.length > 10
        invalid_properties.push('invalid value for "latitude", the character length must be smaller than or equal to 10.')
      end

      if !@longitude.nil? && @longitude.to_s.length > 11
        invalid_properties.push('invalid value for "longitude", the character length must be smaller than or equal to 11.')
      end

      if !@un_location_code.nil? && @un_location_code.to_s.length > 5
        invalid_properties.push('invalid value for "un_location_code", the character length must be smaller than or equal to 5.')
      end

      if !@facility_code.nil? && @facility_code.to_s.length > 6
        invalid_properties.push('invalid value for "facility_code", the character length must be smaller than or equal to 6.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@location_name.nil? && @location_name.to_s.length > 100
      return false if !@latitude.nil? && @latitude.to_s.length > 10
      return false if !@longitude.nil? && @longitude.to_s.length > 11
      return false if !@un_location_code.nil? && @un_location_code.to_s.length > 5
      return false if !@facility_code.nil? && @facility_code.to_s.length > 6
      facility_code_list_provider_validator = EnumAttributeValidator.new('String', ["BIC", "SMDG"])
      return false unless facility_code_list_provider_validator.valid?(@facility_code_list_provider)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] location_name Value to be assigned
    def location_name=(location_name)
      if location_name.nil?
        fail ArgumentError, 'location_name cannot be nil'
      end

      if location_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "location_name", the character length must be smaller than or equal to 100.'
      end

      @location_name = location_name
    end

    # Custom attribute writer method with validation
    # @param [Object] latitude Value to be assigned
    def latitude=(latitude)
      if latitude.nil?
        fail ArgumentError, 'latitude cannot be nil'
      end

      if latitude.to_s.length > 10
        fail ArgumentError, 'invalid value for "latitude", the character length must be smaller than or equal to 10.'
      end

      @latitude = latitude
    end

    # Custom attribute writer method with validation
    # @param [Object] longitude Value to be assigned
    def longitude=(longitude)
      if longitude.nil?
        fail ArgumentError, 'longitude cannot be nil'
      end

      if longitude.to_s.length > 11
        fail ArgumentError, 'invalid value for "longitude", the character length must be smaller than or equal to 11.'
      end

      @longitude = longitude
    end

    # Custom attribute writer method with validation
    # @param [Object] un_location_code Value to be assigned
    def un_location_code=(un_location_code)
      if un_location_code.nil?
        fail ArgumentError, 'un_location_code cannot be nil'
      end

      if un_location_code.to_s.length > 5
        fail ArgumentError, 'invalid value for "un_location_code", the character length must be smaller than or equal to 5.'
      end

      @un_location_code = un_location_code
    end

    # Custom attribute writer method with validation
    # @param [Object] facility_code Value to be assigned
    def facility_code=(facility_code)
      if facility_code.nil?
        fail ArgumentError, 'facility_code cannot be nil'
      end

      if facility_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "facility_code", the character length must be smaller than or equal to 6.'
      end

      @facility_code = facility_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] facility_code_list_provider Object to be assigned
    def facility_code_list_provider=(facility_code_list_provider)
      validator = EnumAttributeValidator.new('String', ["BIC", "SMDG"])
      unless validator.valid?(facility_code_list_provider)
        fail ArgumentError, "invalid value for \"facility_code_list_provider\", must be one of #{validator.allowable_values}."
      end
      @facility_code_list_provider = facility_code_list_provider
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          location_name == o.location_name &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          un_location_code == o.un_location_code &&
          facility_code == o.facility_code &&
          facility_code_list_provider == o.facility_code_list_provider &&
          address == o.address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [location_name, latitude, longitude, un_location_code, facility_code, facility_code_list_provider, address].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MaerskClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
