=begin
#Track & Trace Events

#Retrieve Track & Trace Events based on DCSA Interface standard v.2.2  This service provides visibility to Shipment, Equipment and Transport events for shipments booked with A.P. Moller-Maersk A/S using standards set by the Digital Container Shipping Association.\\ <https://dcsa.org/> 

The version of the OpenAPI document: 1.2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module MaerskClient
  class TransportCall
    # The unique identifier for a transport call
    attr_accessor :transport_call_id

    # The code of the service for which the schedule details are published.
    attr_accessor :carrier_service_code

    # \\*\\*\\*do not use\\*\\*\\* this field is replaced by `exportVoyageNumber` from Version 1.1 and will be removed by the API from next major version  The vessel operator-specific identifier of the Voyage.\\ The export voyage is returned when there are multiple voyages. 
    attr_accessor :carrier_voyage_number

    # The vessel operator-specific identifier of the export Voyage.
    attr_accessor :export_voyage_number

    # The vessel operator-specific identifier of the import Voyage.
    attr_accessor :import_voyage_number

    # Transport operator's key that uniquely identifies each individual call. This key is essential to distinguish between two separate calls at the same location within one voyage.
    attr_accessor :transport_call_sequence_number

    # The UN Location code specifying where the place is located.
    attr_accessor :un_location_code

    # The code used for identifying the specific facility. This code is not the UN Location Code.
    attr_accessor :facility_code

    # The provider used for identifying the facility Code
    attr_accessor :facility_code_list_provider

    # A specialized version of the facilityCode to be used in TransportCalls. The code to identify the specific type of facility. * BOCR (Border crossing) * CLOC (Customer location) * COFS (Container freight station) * COYA (Deprecated - use OFFD intead) * OFFD (Off dock storage) * DEPO (Depot) * INTE (Inland terminal) * POTE (Port terminal) * RAMP (Ramp) 
    attr_accessor :facility_type_code

    # An alternative way to capture the facility when no standardized DCSA facility code can be found.
    attr_accessor :other_facility

    # The code specifying the mode of transport.
    attr_accessor :mode_of_transport

    attr_accessor :location

    attr_accessor :vessel

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transport_call_id' => :'transportCallID',
        :'carrier_service_code' => :'carrierServiceCode',
        :'carrier_voyage_number' => :'carrierVoyageNumber',
        :'export_voyage_number' => :'exportVoyageNumber',
        :'import_voyage_number' => :'importVoyageNumber',
        :'transport_call_sequence_number' => :'transportCallSequenceNumber',
        :'un_location_code' => :'UNLocationCode',
        :'facility_code' => :'facilityCode',
        :'facility_code_list_provider' => :'facilityCodeListProvider',
        :'facility_type_code' => :'facilityTypeCode',
        :'other_facility' => :'otherFacility',
        :'mode_of_transport' => :'modeOfTransport',
        :'location' => :'location',
        :'vessel' => :'vessel'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transport_call_id' => :'String',
        :'carrier_service_code' => :'String',
        :'carrier_voyage_number' => :'String',
        :'export_voyage_number' => :'String',
        :'import_voyage_number' => :'String',
        :'transport_call_sequence_number' => :'Integer',
        :'un_location_code' => :'String',
        :'facility_code' => :'String',
        :'facility_code_list_provider' => :'String',
        :'facility_type_code' => :'String',
        :'other_facility' => :'String',
        :'mode_of_transport' => :'String',
        :'location' => :'Location',
        :'vessel' => :'Vessel'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MaerskClient::TransportCall` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MaerskClient::TransportCall`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transport_call_id')
        self.transport_call_id = attributes[:'transport_call_id']
      end

      if attributes.key?(:'carrier_service_code')
        self.carrier_service_code = attributes[:'carrier_service_code']
      end

      if attributes.key?(:'carrier_voyage_number')
        self.carrier_voyage_number = attributes[:'carrier_voyage_number']
      end

      if attributes.key?(:'export_voyage_number')
        self.export_voyage_number = attributes[:'export_voyage_number']
      end

      if attributes.key?(:'import_voyage_number')
        self.import_voyage_number = attributes[:'import_voyage_number']
      end

      if attributes.key?(:'transport_call_sequence_number')
        self.transport_call_sequence_number = attributes[:'transport_call_sequence_number']
      end

      if attributes.key?(:'un_location_code')
        self.un_location_code = attributes[:'un_location_code']
      end

      if attributes.key?(:'facility_code')
        self.facility_code = attributes[:'facility_code']
      end

      if attributes.key?(:'facility_code_list_provider')
        self.facility_code_list_provider = attributes[:'facility_code_list_provider']
      end

      if attributes.key?(:'facility_type_code')
        self.facility_type_code = attributes[:'facility_type_code']
      end

      if attributes.key?(:'other_facility')
        self.other_facility = attributes[:'other_facility']
      end

      if attributes.key?(:'mode_of_transport')
        self.mode_of_transport = attributes[:'mode_of_transport']
      else
        self.mode_of_transport = nil
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'vessel')
        self.vessel = attributes[:'vessel']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@transport_call_id.nil? && @transport_call_id.to_s.length > 100
        invalid_properties.push('invalid value for "transport_call_id", the character length must be smaller than or equal to 100.')
      end

      if !@carrier_service_code.nil? && @carrier_service_code.to_s.length > 5
        invalid_properties.push('invalid value for "carrier_service_code", the character length must be smaller than or equal to 5.')
      end

      if !@carrier_voyage_number.nil? && @carrier_voyage_number.to_s.length > 50
        invalid_properties.push('invalid value for "carrier_voyage_number", the character length must be smaller than or equal to 50.')
      end

      if !@export_voyage_number.nil? && @export_voyage_number.to_s.length > 50
        invalid_properties.push('invalid value for "export_voyage_number", the character length must be smaller than or equal to 50.')
      end

      if !@import_voyage_number.nil? && @import_voyage_number.to_s.length > 50
        invalid_properties.push('invalid value for "import_voyage_number", the character length must be smaller than or equal to 50.')
      end

      if !@un_location_code.nil? && @un_location_code.to_s.length > 5
        invalid_properties.push('invalid value for "un_location_code", the character length must be smaller than or equal to 5.')
      end

      if !@facility_code.nil? && @facility_code.to_s.length > 6
        invalid_properties.push('invalid value for "facility_code", the character length must be smaller than or equal to 6.')
      end

      if !@other_facility.nil? && @other_facility.to_s.length > 100
        invalid_properties.push('invalid value for "other_facility", the character length must be smaller than or equal to 100.')
      end

      if @mode_of_transport.nil?
        invalid_properties.push('invalid value for "mode_of_transport", mode_of_transport cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@transport_call_id.nil? && @transport_call_id.to_s.length > 100
      return false if !@carrier_service_code.nil? && @carrier_service_code.to_s.length > 5
      return false if !@carrier_voyage_number.nil? && @carrier_voyage_number.to_s.length > 50
      return false if !@export_voyage_number.nil? && @export_voyage_number.to_s.length > 50
      return false if !@import_voyage_number.nil? && @import_voyage_number.to_s.length > 50
      return false if !@un_location_code.nil? && @un_location_code.to_s.length > 5
      return false if !@facility_code.nil? && @facility_code.to_s.length > 6
      facility_code_list_provider_validator = EnumAttributeValidator.new('String', ["BIC", "SMDG"])
      return false unless facility_code_list_provider_validator.valid?(@facility_code_list_provider)
      facility_type_code_validator = EnumAttributeValidator.new('String', ["BOCR", "CLOC", "COFS", "COYA", "OFFD", "DEPO", "INTE", "POTE", "RAMP"])
      return false unless facility_type_code_validator.valid?(@facility_type_code)
      return false if !@other_facility.nil? && @other_facility.to_s.length > 100
      return false if @mode_of_transport.nil?
      mode_of_transport_validator = EnumAttributeValidator.new('String', ["VESSEL", "RAIL", "TRUCK", "BARGE"])
      return false unless mode_of_transport_validator.valid?(@mode_of_transport)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] transport_call_id Value to be assigned
    def transport_call_id=(transport_call_id)
      if transport_call_id.nil?
        fail ArgumentError, 'transport_call_id cannot be nil'
      end

      if transport_call_id.to_s.length > 100
        fail ArgumentError, 'invalid value for "transport_call_id", the character length must be smaller than or equal to 100.'
      end

      @transport_call_id = transport_call_id
    end

    # Custom attribute writer method with validation
    # @param [Object] carrier_service_code Value to be assigned
    def carrier_service_code=(carrier_service_code)
      if carrier_service_code.nil?
        fail ArgumentError, 'carrier_service_code cannot be nil'
      end

      if carrier_service_code.to_s.length > 5
        fail ArgumentError, 'invalid value for "carrier_service_code", the character length must be smaller than or equal to 5.'
      end

      @carrier_service_code = carrier_service_code
    end

    # Custom attribute writer method with validation
    # @param [Object] carrier_voyage_number Value to be assigned
    def carrier_voyage_number=(carrier_voyage_number)
      if carrier_voyage_number.nil?
        fail ArgumentError, 'carrier_voyage_number cannot be nil'
      end

      if carrier_voyage_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "carrier_voyage_number", the character length must be smaller than or equal to 50.'
      end

      @carrier_voyage_number = carrier_voyage_number
    end

    # Custom attribute writer method with validation
    # @param [Object] export_voyage_number Value to be assigned
    def export_voyage_number=(export_voyage_number)
      if export_voyage_number.nil?
        fail ArgumentError, 'export_voyage_number cannot be nil'
      end

      if export_voyage_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "export_voyage_number", the character length must be smaller than or equal to 50.'
      end

      @export_voyage_number = export_voyage_number
    end

    # Custom attribute writer method with validation
    # @param [Object] import_voyage_number Value to be assigned
    def import_voyage_number=(import_voyage_number)
      if import_voyage_number.nil?
        fail ArgumentError, 'import_voyage_number cannot be nil'
      end

      if import_voyage_number.to_s.length > 50
        fail ArgumentError, 'invalid value for "import_voyage_number", the character length must be smaller than or equal to 50.'
      end

      @import_voyage_number = import_voyage_number
    end

    # Custom attribute writer method with validation
    # @param [Object] un_location_code Value to be assigned
    def un_location_code=(un_location_code)
      if un_location_code.nil?
        fail ArgumentError, 'un_location_code cannot be nil'
      end

      if un_location_code.to_s.length > 5
        fail ArgumentError, 'invalid value for "un_location_code", the character length must be smaller than or equal to 5.'
      end

      @un_location_code = un_location_code
    end

    # Custom attribute writer method with validation
    # @param [Object] facility_code Value to be assigned
    def facility_code=(facility_code)
      if facility_code.nil?
        fail ArgumentError, 'facility_code cannot be nil'
      end

      if facility_code.to_s.length > 6
        fail ArgumentError, 'invalid value for "facility_code", the character length must be smaller than or equal to 6.'
      end

      @facility_code = facility_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] facility_code_list_provider Object to be assigned
    def facility_code_list_provider=(facility_code_list_provider)
      validator = EnumAttributeValidator.new('String', ["BIC", "SMDG"])
      unless validator.valid?(facility_code_list_provider)
        fail ArgumentError, "invalid value for \"facility_code_list_provider\", must be one of #{validator.allowable_values}."
      end
      @facility_code_list_provider = facility_code_list_provider
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] facility_type_code Object to be assigned
    def facility_type_code=(facility_type_code)
      validator = EnumAttributeValidator.new('String', ["BOCR", "CLOC", "COFS", "COYA", "OFFD", "DEPO", "INTE", "POTE", "RAMP"])
      unless validator.valid?(facility_type_code)
        fail ArgumentError, "invalid value for \"facility_type_code\", must be one of #{validator.allowable_values}."
      end
      @facility_type_code = facility_type_code
    end

    # Custom attribute writer method with validation
    # @param [Object] other_facility Value to be assigned
    def other_facility=(other_facility)
      if other_facility.nil?
        fail ArgumentError, 'other_facility cannot be nil'
      end

      if other_facility.to_s.length > 100
        fail ArgumentError, 'invalid value for "other_facility", the character length must be smaller than or equal to 100.'
      end

      @other_facility = other_facility
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mode_of_transport Object to be assigned
    def mode_of_transport=(mode_of_transport)
      validator = EnumAttributeValidator.new('String', ["VESSEL", "RAIL", "TRUCK", "BARGE"])
      unless validator.valid?(mode_of_transport)
        fail ArgumentError, "invalid value for \"mode_of_transport\", must be one of #{validator.allowable_values}."
      end
      @mode_of_transport = mode_of_transport
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transport_call_id == o.transport_call_id &&
          carrier_service_code == o.carrier_service_code &&
          carrier_voyage_number == o.carrier_voyage_number &&
          export_voyage_number == o.export_voyage_number &&
          import_voyage_number == o.import_voyage_number &&
          transport_call_sequence_number == o.transport_call_sequence_number &&
          un_location_code == o.un_location_code &&
          facility_code == o.facility_code &&
          facility_code_list_provider == o.facility_code_list_provider &&
          facility_type_code == o.facility_type_code &&
          other_facility == o.other_facility &&
          mode_of_transport == o.mode_of_transport &&
          location == o.location &&
          vessel == o.vessel
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transport_call_id, carrier_service_code, carrier_voyage_number, export_voyage_number, import_voyage_number, transport_call_sequence_number, un_location_code, facility_code, facility_code_list_provider, facility_type_code, other_facility, mode_of_transport, location, vessel].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MaerskClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
